{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fnil\fcharset0 Monaco;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green2\blue2;\red0\green0\blue191;\red191\green0\blue0;
\red96\green96\blue96;\red0\green115\blue0;}
\vieww9000\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs28 \cf2 WFS Classes
\fs24 \

\b0 by W. Snoei, R. Ganchrow, J. Truetzler and M. Negr\'e3o\
\
WFS = 
\i Wave Field Synthesis
\i0 \
\
\
\
To start up the system run (i.e. put the cursor behind the line and hit enter - not return):\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs18 \cf3 WFS\cf0 .startup;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 This should start up a window containing one Server view called "master" and some knobs.\
The master server is the server controlling the WFS system. When no WFS system is around ( "single" mode ) this will also run the engine for headphone playback. \
\
The "K" button kills all running server applications, and should be used when the server fails to start. The "F" button frees all running synths on all servers in the system. \
The "R" button opens a ServerRecordWindow; record things playing on the master server to disk.\
The "?" button calls up this help file.\
\
From the other buttons at the top of the window you can choose to open a\
the Path Editor, the Score Editor or the control windows: Transport window and Level window.
\f1\fs18 \cf0 \

\f0\fs24 \cf2 \
\

\b Path Editor\

\b0 The path editor is designed to create a bank of spatial paths in many different ways. Paths can be drawn, generated, scaled, rotated, morphed and more. Each path has it's own name, which should be unique within one session. These paths should be seen as a global "bank" of usable paths. They can be copied to your scores, and sent back from them to edit them. The paths in the Score editor are always copies of the paths in the Path editor.\
\
At the bottom of the window the "time editor" can be found, representing a time line for all points. The colors of the points there correspond with those in the path display section above. The y-axis (height) of the graph shows the speed of each segment between points. When points are moved more towards each other and time difference between them stays the same, the speed will go down. Under the time display there are a number of time-only transform options, amongst which several ways to control the overall average speed of the path. The 'animate' button at the top of the window animates the currently shown path.\
\
Above the time editor, a "point editor" can be found, which gives information about one point in the path. When pressing "edit" here the point editor will unlock and points can be edited to the millimeter. \
\
The "plot smooth.." menu has options for plotting the currently selected path in a special plot window, where it is shown relative to the speaker configuration and with correct interpolation curves. Selecting the "auto" option next to this menu will automatically update the plot window at every change made. However this option will severely slow down the editor's performance.\
\
When a transformation on a path is done, press "keep changes" to place the transformed version in the Path editor's path bank and reset all transform parameters. Also a new "state" is created in the undo history (under the "keep changes" button), which can be recalled by selecting it in the undo history menu. Please note that "keep changes" does not save to disk, but only to memory. Use the "file->save.." options to save paths to disk.\
\
The paths can be saved together in a "path bank file" using the "save.." options. The file format is an open xml-based format which can be easily altered by hand in a text editor. The "open.." option can be used to open existing path bank files, add them to the current set or fully replace the current set (which will be lost when not saved before).  Score files from the Score Editor can also be opened; the path editor will automatically extract all valid paths from them and tell the user how many were found before importing them.\
\

\i SVG files\

\i0 The SVG file format is a web standard vector-based graphic format which can be read and written by various graphic applications ( such as Adobe Illustrator ). The path editor can import and export 2 dimensional path data in SVG files (using the "file->import SVG.." and "file->export SVG.." options).\
A few notes:
\f2 \cf0 \
- time data is not read/written; only 2 dimensional path data. On  import all paths will have a duration of 1 s.\
- scaling is set to one standard for now: 20px = 1m, center is at  point (X = 300px,Y = 300px).\
- at export, the points in a path are saved as smoothly curved  segments; the way they will also playback on the wfs system.\
- when importing curved segments the user can choose wether to use  those curves or only the breakpoints/lines:\
- lines only: files exported from the path editor will import  exactly as they were when saved.\
- curves: curves are calculated and interpolated with 10 points per  segment.\
- an exported file from the path editor will also include a graphic  representation of the speaker configuration (4 yellow lines).\
- the following types of SVG objects are imported:\
	- line, rect, polyline, polygon, path\
- all other types of svg objects are ignored, specifically:\
	- groups ('g' object), circles and any object with id  "SpeakerConfiguration"\
- grouped objects will be ignored; only the top layer is used.\
- export options:\
	- styled: will include colored dots at the breakpoints; use this  for printing etc..\
	- simple: only the lines; use this for editing.
\f0 \cf2 \
\
\

\b Score Editor\

\b0 The score editor holds arrangements with multiple sounds, so called "events". It represents a timeline on which events can be arranged. The sounds can be mono audio-files or a test signal ("blip"). The type of event is represented by a color, and a name in the edit window. Check the "add" popup menu to add new events. Events can be moved by dragging them with the mouse, and duplicated by dragging with the option-key. The "snap" menu determines the resolution at which things can be dragged around. Note that multiple selection can be achieved using the shift-key, but only the first selected event can be moved at a time. Use the 'folder' options as described below to drag multiple events around. "plot all" will plot an overview of all spatial data used in the score. The "plot all" button plots all spatial information included in the current score. The tracks, represented by the horizontal white and grey alternating lines, are only for graphic convenience; events will not play differently on different tracks. As soon as the total track count is too low for the events that need to be displayed, the score editor will automaticly generate extra tracks.\

\i \
File menu:
\i0 \
When the arrangement is finished use "File->save score" to store it as a "score file" file. The file format is xml-based, clear and easy to understand so files can be edited by hand with a regular text editor. "File-combine or append scores" lets the user do as it says; select one or more score files in the file dialog and choose for every score file how where and how to include it in the current score.\
\

\i Options menu:
\i0 \
"sort events" renumbers events according to their start times. The order of events does not change the way they are played back in any way. \
"overlapping events to new tracks" detects all overlapping events in the current score and rearranges things so that they don't overlap anymore. The total track cound might increase when using this option. This is also automatically done in various other functions in the Score Editor.\
"add track" adds a track manually. "remove unused tracks" will remove tracks above the default track count unless an event is on them.\
"folder from selected events" will create a 'folder' event from the currently selected events. It will show up in the editor as a grey colored event named "folder (n events)". Folders can be opened by selecting them, click "edit" and then "open" in the Event Editor.\
"unpack selected folders" will place the folder contents back in to the main score and delete the empty folder. It only affects the 'folder' events among the currently selected events.\
"select all" will select all events.\
"select similar" will select all events of the same type as the ones currently selected.\
\
To edit events in the Score Editor click on "edit". This will open a new window: the Event Editor.\
\

\b Event Editor\

\b0 The event editor gives control over the first selected event in the score editor. Starttime, duration, level and event type can be set for every event. The rest of the window changes according to the event type chosen. \
\
event types:\

\i \
linear
\i0 \
linear events are point sources, moving according to a specified spatial path. The movements are calculated with linear interpolation of the Wavefield Synthesis phase difference calculation. The paths themselves however are always calculated with cubic interpolation in between the points. Paths can be edited in the Path Editor by clicking "edit". This creates a copy of the path. When you want to use the edited path in the event click "from editor", and the currently selected path from the editor will be copied to the event. Use "plot" to do a fast plot of the path with cubic interpolation. The length of the spatial path always decides the duration of the event. To change lengths of linear and cubic events use the path editor as described above.\
\
---- int types:\

\i cubic\

\i0 Same as linear, but here the phase calculations are done with cubic interpolation. This results in a little better sound quality, with a lot more CPU usage.\
\

\i static\

\i0 static events are non-moving point sources. A position x/y in meters can be specified in the window (where x,y = 0,0 is the center of the hall, negative x is to the left, negative y is to the back)\
\

\i plane
\i0 \
plane events are plane waves. They are specified with angle from center in degrees ( where 0 degrees is in front ) and distance in meters.\
\

\i index\

\i0 index events address a specific speaker in the WFS system. The index is the speaker number, counting clockwise, starting at the left top of the square. "plot" will display the currently selected speaker as a point in a plot window. Indexes between whole numbers will pan the output between the two nearest speakers. This event type uses by far the lowest amount of CPU power.\
\
---- audio types\

\i buf\

\i0 buf events contain a reference to an audio file, which will be loaded into the server's memory when played. This is the best option for shorter audio files. The audio files should always be mono, a warning will be displayed when this is not the case. Files can be browsed using the finders browsing window or specified by hand. the "check" button verifies if the file exist and can be used, and also stores the duration of the file in the numberbox below it. Clicking the "use" button next to that will change the events duration to that of the sound file. In case of linear and cubic events this will also change the duration of the path. "rate" specifies the playback rate and "loop" the loop mode.\
\

\i disk\

\i0 disk events also contain a reference to an audio file, but are played back from disk. This is a better option for longer audio files, but when too many are running at the same time clicks may occur. Disk events don't have rate and loop options.\
\

\i blip\

\i0 blip events contain a test signal. Frequency, rate and noise level can be changed\
\

\i func\

\i0 func events cannot be used yet. They will contain valid SuperCollider code for the audio, which will be generated in realtime\
\

\i live\

\i0 live events can be used, but are not yet supported by the wfs system. For these events live audio input from microphones etc can be used. However there will  be little over 512 samples latency.\
\
---- special type:\

\i folder\

\i0 a folder event contains a full score, which is played back at the folder's start time. To open the folder score press "open" in the editor. This will open a new Score Editor window with a darker color and a few options disabled. The duration of the folder event is derrived automatlcally from it's contents. A folder can contain the same types of event as the score, and can also contain subfolders (and sub-subfolders and so on).\
\
\

\b Transport Window\

\b0 The transport window contains the play and stop buttons and timeline indicator for the system. The window will always play the currently selected Score Window. The Score Editor will also display the time position as a black line. Playback will start up a pulse signal on the master server, which is used for synchronisation on the client servers (or on the master in single mode). Before the counter starts there will always be the "load delay" (which is specified in WFSEvent.wait and defaults to 5 seconds). This is the time needed to load and setup the first playing events. If the time display is not running after that something is wrong with the master server. Pressing "K" and booting it again will help in most cases. When the start time is not zero, only events starting after the starttime will be played. Events which should be runnig already at that time are ignored, as well as folder events starting before the start time.\
\

\i current score:
\i0 \
When multiple Score windows are opened at the same time, they are reffered to as id numbers. The id number of a score is always displayed in the Score editor window's name (between brackets). These numbers can also be found on the Transport window in the "score: current" menu. The last touched score editor is reffered to as "current", and is the one played when playback is started. Another currently opened score can be chosen from this menu, which will bring its window to the front and make it the "current" score. Clicking inside a Score editor window will do the same thing. \
\

\b Level Window\

\b0 The level window can be regarded as a giant volume fader. The default volume for the system is -12dB. The level is stored on each server application in a controlrate Bus, and used by the playing synths. It can be changed in realtime. This fader is different from most other faders in SuperCollider; it will never jump to a new value when clicked on. When the server is rebooted the value will return to the default, so the user should then move the fader a bit to restore it. Values are in dB.\
\
\

\b about the Game Of Life system\

\b0 The Game Of Life system consists of 192 custom designed speakers, in a 10.2m x 10.2m squared configuration around the audience. The speakers are spaced 16,4cm from each other, and there are empty spaces of about 1m in every corner. There are also 12 subwoofers, devided equally among the 4 sides. All speakers are driven by costum designed amps from Hypex. The total rms power of the system is around 10.000 watts.\
\
The audio is calculated on two Apple Quad G5 2.5GHz computers (the clients), each responsible for two sides of the square. A third computer (the master) is a MacBook, which controls both clients. The systems are linked together trough Gigabit Ethernet and Adat optical cables (out from the master, in to both clients). The master computer is also responsible for all graphic information and functions as a control unit.  \
\
The interfacing between computers and amplifiers is done using 8 Motu 2408mkIII units and 24 Behringer ADA8000 units. The system is designed to be portable and easy to set up and break down.\
\
\

\b about the WFS startup modes
\b0 \
In the current default setup mode ( 'single' ) a headphone playback model is used. This gives a representation of how things will sound on the full system. The software for the full system is already included as well; it can be started by calling:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs18 \cf3 WFS\cf0 .startupFull; \cf4 // for the master computer in the gameoflife system\cf0 \
\cf3 WFS\cf0 .startupClient; \cf4 // for the client computers\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs24 \cf2 about the sync system
\b0 \
For synchronising the computers used in the system an audio pulse signal is used. It is emitted from the system's "masterServer", which runs on the master computer. The pulse is sent to all client computers trough a digital audio connection. Each computer contains a counter system which starts the pre-loaded and setup events at the apropriate times. Before running any scores a measurement should be made of the input to output delays of all running server applications on all clients. This is done by pushing the "get sync delays" button (which only appears in the master computer mode), and will take a few seconds. These measurements are then used to compensate the output latency differences. This system provides a full sample-accurate synchronisation for the whole system, which is crucial because the client computers each calculate for a number of speakers, and the wfs system depends on time differences between speakers. The sync system is also used internally for the 'single' mode, to give an accurate view of what will be happening once running on the real system.\
\

\i -----
\i0 \
\
\

\b The Classes
\b0 \
\
Classes for 
\b designing and composing 
\b0 spatial information
\b :\

\b0 \
\

\b WFSPoint\

\b0 3 dimensional cartesian point (x, y, z)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf2 WFSPoints define an absolute position in meters in the space where the WFS system is installed. WFSPoint(0,0,0) is the absolute center of the space, when x goes up the point moves to the right, when y goes up the point moves towards the front. Z defines the altidude, but in the current wfs setup this value is not used. It is there for future extensions. z=0 would mean ear level then, and currently is the speakerlevel. This should always be zero, but tweaking this can be done. WFSPoints can also contain audio or control rate values. Note that not all method calls might work on non-scalar values.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs24 \cf2 WFSPlane\

\b0 plane wave specification ( angle, distance )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf2 WFSPlanes define an absolute position in angle degrees meters of a plane wave. Angle is the direction in which\
the plane wave is pointed, distance is the distance from the center ( WFSPoint(0,0,0) ) of the space.\
WFSPlanes can not move over time in this version of WFS Classes\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs24 \cf2 \
WFSPath\

\b0 A spatial path containing positions and delta-times ( [ positions ], [ times ], name )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf2 The WFSPath contains an array of positions (WFSPoints) and times in between them (in seconds). It represents a thee-dimensional path for a sound source to travel across the space. There are various of ways to create and generate them. These paths can be saved in xml files. Each WFSPath in a project should preferrably have a unique name. If this name is not given by the user the class will generate one on its own.\
\
special creation methods:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf2 	*circle 
\b0 ( number of points, center position, radius, start angle, number of cycles, \
		scale amount per new point, close end (true/false), duration (seconds), name )\
		\
	
\b *ellipse 
\b0 ( number of points, center position, radius, start angle, number of cycles, \
			scale end point, move end point, close end (true/false), duration (seconds), name )\
		Better version of circle: radius can be [x,y], Point or WFSPoint, and scale/move end\
		point are implemented differently\
	\
	
\b *rand 
\b0 ( number of points, radius, duration, name )\
	\
	
\b *randS 
\b0 ( number of points, radius, seed, duration, name )\
		Seeded rand\
	\
	
\b *spiral 
\b0 ( number of periods, resolution ( points per period ), start radius, end radius, duration, name )\
	\
	
\b *lissajous 
\b0 ( number of points, periods x, periods y, phase x. phase y, radius, duration, name )\
	\
	
\b *line 
\b0 ( number of points, start point, angle, speed, accelleration, delta time per point, name )\
	\
	
\b *rect 
\b0 ( left, top, width, height, rounded corner radius, rounded corner division, duration, name )\
	\
	
\b *generate 
\b0 ( number of points, function, name, time mode ( 'delta' / 'absolute' ) )\
		The function is passed the following arguments:\
			count\
			array with out points created so far\
			array with times created so far\
		It should output an Array with a WFSPoint and a time value\

\b \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs24 \cf2 WFSPathEditor\

\b0 A two dimensional graphical editor for WFSPath objects\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf2 Many WFSPath modifications can be called from here, and group transformations. There can be only one path editor active at a time. All the contents of the editor are stored in global variables, and can still be accessed when the path editor window itself is closed.\
\
The path editor does not edit the WFSPaths objects themselves; it imports them into it's own space. They can be accessed with 
\f1\fs18 \cf3 WFSPath\cf0 .fromEditor
\f0\fs20 \cf2 , which will create a new WFSPath object with the currently edited path.\cf0  \cf2  
\f1\fs18 \cf3 WFSPath\cf0 .paths 
\f0\fs20 \cf2 will create a WFSPathArray containing all loaded paths from the editor.\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs18 \cf0 \
\cf3 WFSPathEditor\cf0 .new; \cf4 // open empty WFSPathEditor\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf0 \
Another easy way to call the WFSPathEditor is from WFSPath:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs18 \cf0 (\
p = \cf3 WFSPath\cf0 .circle; \cf4 // create a (circle shaped) WFSPath\cf0 \
p.edit;             \cf4 // add it to the WFSPathEditor\cf0 \
)\
\
(\
q = \cf3 WFSPath\cf0 .fromEditor; \cf4 // get the currently edited path from the editor\cf0 \
q.plot;                 \cf4 // plot it in a window\cf0 \
)
\f0\fs20 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs24 \cf0 Classes for 
\b configuring 
\b0 the system:
\fs20 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs24 \cf0 WFSSpeaker\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 Speaker position and direction (x,y,z,angle) \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf0 WFSSpeakers define an absolute positions in meters of the speakers in the space where the WFS system is installed. The direction is an angle in degrees ( 0-360 by default ) relative to the speaker itself in which the emitted sound  travels. WFSSpeaker(0,1,0,180) would be a speaker one meter in front of the center of the space, faced towards the center.\
\
Please note that all angle information in the WFS Classes is turned to the right by 90\'b0 in relation to regular polar coordinates: a wfs angle of 0\'b0 means towards the front of the system\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs24 \cf0 \
WFSSpeakerArray / WFSSpeakerLine\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 Arrays containing speaker information for multiple speakers\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf0 \
These are Arrays of WFSSpeakers. A WFSSpeakerArray can contain any WFSSpeaker where a WFSSpeakerLine only contains speakers which are next to each other and facing the same direction. \
The typical 8-speakerarrays often used for WFS synthesis can be easily created with WFSSpeakeLine:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs18 \cf0 (\
a = \cf3 WFSSpeakerLine\cf0 .newFromLeft( \
	\cf3 WFSSpeaker\cf0 ( 0, 0, 0, 50 ),  \cf4 // most left sided speaker (when standing in front of array)\cf0 \
	8,                          \cf4 // number of speakers in line\cf0 \
	0.125 );                     \cf4 // distances between every speaker\cf0 \
	\
a.plotSmooth;     	                  \cf4 // show the speakerline in a window\cf0 \
)
\f0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs24 \cf0 WFSConfiguration\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 A collection of speaker positions, containing WFSSpeakerArrays and WFSSpeakerLines\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf0 WFSConfiguration is the class containing all speaker positions for a WFS system. The configuration also gets a name, which is generated according to the input values. This name is used in the naming of the WFSSynthDefs, and can be changed after creation.\
\
classvar 
\b \cf2 default 
\b0 \cf0 is a placeholder for the default configuration. This is used for all synthdefs and plot windows.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs18 \cf3 WFSConfiguration\cf0 .default;
\f0\fs20 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 special creation methods:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf2 	*stereo 
\b0 (  width )\
		A configuration wih only 2 speakers facing eachother is created. Typical for headphone use\
	\
	
\b *quad 
\b0 ( width, depth )\
		A configuration with 4 speakers is created, facing each other. For use with conventional\
		quadraphonic setups\
	\
	
\b *rect 
\b0 ( number of speakers x, number of speakers y, distance between every two speakers )\
		Contains a rectangle shaped setup with four sides facing each other. \
	\
	
\b *rect2 
\b0 ( number of speakers x, number of speakers y, distance between every two speakers,\
			distance between left and right sides, distance between front and back sides,   )\
		Contains a rectangle shaped setup with four sides facing each other\
		This is the default setup for the Game Of Life WFS system\
		\
	
\b *halfRect2_1 
\b0 ( number of speakers x, number of speakers y, distance between every two speakers,\
			distance between left and right sides, distance between front and back sides,   )\
		Contains the front and right side a rectangle shaped setup with four sides facing each other\
		This is the default setup for the Game Of Life WFS system's first server\
	\
	
\b *halfRect2_2 
\b0 ( number of speakers x, number of speakers y, distance between every two speakers,\
			distance between left and right sides, distance between front and back sides,   )\
		Contains the front and right side a rectangle shaped setup with four sides facing each other\
		This is the default setup for the Game Of Life WFS system's second server\
		\
		\
	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs18 \cf0 (\
c = \cf3 WFSConfiguration\cf0 .rect2( 48, 58, 0.165 ); \cf4 // create a rectangle shaped configuration\cf0 \
\
(\cf5 "width: "\cf0  ++ c.width ++ \cf5 "m"\cf0 ).postln;        \cf4 // post the width in meters\cf0 \
(\cf5 "depth: "\cf0  ++ c.depth ++ \cf5 "m"\cf0 ).postln;        \cf4 // post the depth in meters\cf0 \
(\cf5 "size:  "\cf0  ++ c.allSpeakers.size ++ \cf5 " speakers"\cf0 ).postln;    \cf4 // post the total number of speakers\cf0 \
\
c.plot;                \cf4 // show the whole thing in a window       \cf0 \
)
\f0\fs20 \cf2 \
	\
	\
	\
display methods for 
\b WFSPath
\b0 , 
\b WFSPathArray
\b0 , 
\b WFSPointArray
\b0 , 
\b WFSSpeakerArray
\b0 , 
\b WFSSpeakerLine
\b0 :\
	\
	
\b *plot \
		
\b0 simple plot in SCEnvelopeView based window\
		\
	
\b *plotSmooth \
		
\b0 interpolated plot in Pen based window. This gives an accurate view of how paths will be played.
\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf2 \
	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs24 \cf2 Classes for 
\b synthesizing 
\b0 the wavefield:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs24 \cf0 WFSPan2D\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 A UGen for calculating WFS ( sound, location, configuration )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf0 WFSPan2D does the actual delaytime and amplitude for a full WFSConfiguration, and imposes them on an \
input sound. The location is a WFSPoint or WFSPlane, and the configuration a WFSConfiguration object.\
\
The following creation methods can be used:\
	\
	
\b \cf2 *arBufL 
\b0 (  input sound (one channel), delay buffer number, location, configuration )\
		For moving sounds this is the most optimized one to use. In offers linear interpolation for the delays.\
		The delay buffer should be a one-channel buffer sized after the largest expected distance between\
		speakers and location. Location should be at control rate.\
	\
	
\b *arBufN 
\b0 ( input sound (one channel), delay buffer number, location, configuration )\
		For static (non-moving) sounds this is the most optimized option. It does not interpolate the delays,\
		so changing the location will produce clicks. \
	\
	
\b *arBufC 
\b0 ( input sound (one channel), delay buffer number, location, configuration )\
		This version is like *arBuf, but with cubic interpolation for the delays, which sounds a little\
		better. This takes noticably more cpu, so only use this one when not too many moving\
		sources are needed\
			\
	
\b *makeBuffer 
\b0 (server, buffer number, maximun distance )\
		This method will create and return a buffer for use with the above methods.\
	\
	
\b *ar / *arN / *arC
\b0  ( input sound, location, configuration )\
		These methods create delay buffers internally and therefore are heavier on CPU.\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i \cf2 --> future additions / to do: \
	switch off when to far away from speaker (maybe not possible?)\
	smooth switching between in front and back for moving sources
\i0 \
	 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs24 \cf0 WFSSynthDef\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 A standardized SynthDef for use in a WFS system ( type, configuration )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf0 WFSSynthDefs need to be generated for every different WFSConfiguraion. They could be regarded\
as the playback engines for the wfs system. All WFSSynthDef types have arguments for total time, fadeout time, level and speaker offset (when the configuration is not starting at the first audio output). There are the folowing types available (more might be added in the future ):\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i \cf0 'linear_blip', 'linear_buf', 'linear_func', 'cubic_blip', 'cubic_buf', 'cubic_func'  
\i0 :   \
	For moving sounds with linear and cubic interpolation. As arguments these have buffer numbers for \
	times, positions and WFSPan delay. \
	The buffers for positions and times can be generated from the WFSPath object. \
	Before playing a Synth based on one of these synthdefs one will have to load buffers containing path data\
	and the delay buffer as discussed in WFSPan.\
	\

\i 'static_blip', 'static_buf', 'static_func' :\
	
\i0 These are for non moving sounds. Arguments are x,y,and z position.
\i  
\i0 \
	\

\i ' ... _blip'
\i0  :\
	This is a test signal. It has no extra arguments\
	\

\i ' ... _buf'
\i0  :\
	This plays a buffer with audio. Extra argument is the buffer number. This should also be loaded before\
	running this SynthDef.\
	\

\i ' ... _func'
\i0  :\
	The func shuld be a function which generates sound. It is used in the SynthDef as input.\
	\

\i '... _live' : \
	
\i0 Uses an AudioIn input as live input\
\
Creation of WFSSynthDef will generate a new SynthDef and store it in it's def parameter. The name of the synthdef will be constructed from the specified type and the WFSConfiguration name. \
\

\i --> future additions / to do: \
	'midi_ ...' type \
	'func_ ...' type ( generate path in realtime with function )\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i0 \cf0 A WFSSynthDef needs to be loaded first for WFSSynth to play it. The speaker configuration is stored inside the\
SynthDef, so a change of configuration means reloading the WFSSynthDefs.\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs24 \cf0 WFSSynth\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 A player for WFS sounds ( WFSSynthDefName, WFSPath, server, sound file path, ... more args )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf0 The WFSSynth object will play a WFSSynthDef, and automatically generate all the buffers needed. When 
\b load
\b0  is called it will load the buffers, including the sound file buffer when the WFSSynthDef type is ' ... _buf'. Then it creates a new synth which will be 
\i paused
\i0 . In order to actually hear the synth one will have to call the 
\b run
\b0  method. After the synth has ended 
\b freeBuffers 
\b0 should be called, to prevent the memory from filling up.\
To do all that automatically a 
\b play
\b0  method is provided, which will call load first, then wait a specified amount of time (1 second by default) and call run. After the synth has ended freeBuffers is also called. This is the most commonly used method. By default it uses the default TempoClock for all scheduling; this can be changed by changing the\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 clock
\b0  classvar.\
\
A WFSSynth can only be played once, and will give error messages when you try to play it again.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i \cf0 -- future additions / to do: \
	synchronizing and division over multiple computers / servers using WFSServers
\i0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs18 \cf0 (\
s = \cf3 Server\cf0 .default;\
s.boot;\
)\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf4 // create a test synthdef for headphone listening setup:\cf0 \
d = \cf3 WFSSynthDef\cf0 ( \cf6 'linear_blip'\cf0 , \cf3 WFSConfiguration\cf0 .stereo );   \
d.load( s );\
)\
\
(\
p = \cf3 WFSPath\cf0 ( [   				\cf4 // create a z-shaped WFSPath\cf0 \
		\cf3 WFSPoint\cf0 ( -1, -1, 0 ), \
		\cf3 WFSPoint\cf0 ( 1, -1, 0 ), 	\
		\cf3 WFSPoint\cf0 ( -1, 1, 0 ), \
		\cf3 WFSPoint\cf0 ( 1, 1, 0 ) ], \
	[ 0.5, 0.5, 0.5 ], \cf6 'z'\cf0  );	\cf4 // times, name\cf0 \
	\
a = \cf3 WFSSynth\cf0 ( \cf6 'linear_blip'\cf0 , p );\
a.load( s ) \cf4 // load all buffers and start paused synth\cf0 \
)\
\
\cf4 // now wait until buffers are loaded (watch the Post Window )\cf0 \
\
a.run;\
\
\cf4 // when finished\cf0 \
\
b.freeBuffers;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf0 \
\
or shortly:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs18 \cf0 \
\cf3 WFSSynth\cf0 ( \cf6 'linear_blip'\cf0 , p ).play( s, 1 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf4 // first loads, waits 1 second (default), runs, and calls freeBuffers when finished\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf0 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs24 \cf0 \
\
Classes where it all comes 
\b together
\b0 :\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 \
WFSEvent\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 A WFS event ( starttime, WFSSynth, track )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf0 The WFSEvent is a placeholder for timed playback of WFSSynths. The WFSSynth should be a newly created one,\
which hasn't been loaded yet. Internally WFSEvent will make a copy of that for every time it is played.\
A classvar 
\b wait
\b0  (1 by default) is used to set the waittime between load and run.\
\
	
\b \cf2 play 
\b0 (server )\
		plays the event at the starttime ( plus wait time as seen in WFSSynth-play )\
		This can be called over and over again.\
		\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs18 \cf0 (\
p = \cf3 WFSPath\cf0 ( [   				\cf4 // create a z-shaped WFSPath\cf0 \
		\cf3 WFSPoint\cf0 ( -1, -1, 0 ), \
		\cf3 WFSPoint\cf0 ( 1, -1, 0 ), 	\
		\cf3 WFSPoint\cf0 ( -1, 1, 0 ), \
		\cf3 WFSPoint\cf0 ( 1, 1, 0 ) ], \
	[ 0.5, 0.5, 0.5 ], \cf6 'z'\cf0  );	\cf4 // times, name\cf0 \
	\
e = \cf3 WFSEvent\cf0 ( 2, \cf3 WFSSynth\cf0 ( \cf6 'linear_blip'\cf0 , p ) );\
)\
\
e.play(s);  \cf4 // will play the enclosed WFSSynth 2 + 1 seconds from now\
\
	
\f0\b\fs20 \cf2 playSync 
\b0 ( WFSServers )\
		This is used internally by the WFSScore and WFSTransport classes. \
		Calling this will load and setup the event, and unload it again after the event \
		is finished. The playback call will have to come from the sync system (see "about the sync system")
\f1\fs18 \cf4 \
	\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 WFSServers\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 A set of MultiServers plus one master Server ( ... ip numbers )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf0 The WFSServers object contains and creates an amount of multiservers running local and/or remote.\
the MultiServers are collections of Servers on 1 computer, typically used for dual or quad core machines.\
The Game Of Life WFS System has 2 quad core G5's, and so runs best with four server apps running\
at the same time.  Both machines handle half of the speakers, so thay run synchronised. The WFSServers\
class handles the synchronisation system.\
\
	
\b makeWindow\
		
\b0 Open threads to all servers and display their performance in one window\
		This is the basic WFS system window, from where all other editors and windows can be\
		opened trough the 'open...' popup menu. \
		\
	
\b m	
\b0 Short for 'masterServer'. This returns the master server if included\
		\
	\
	
\b *single\
		
\b0 creates a WFSServers instance with only one local server. Use for demo playback without a system\
	\
	
\b *master ( ... ip numbers )\
		
\b0 cals *new. This is the version used on the master computer of the system. It contains one local\
		master server and multiple remote servers.\
		\
	
\b *client \
		
\b0 The client version contains only one local multiserver. It is used for the clend units
\fs24 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 WFSScore\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 A time-sorted Collection of WFSEvents, with file write/read option\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 WFSScoreEditor\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 A graphical score editor\
\
\
\
\
ws 2006}